 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
const moment = require('moment');

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/test')
    .get(function(req, res) {
		  res.type('txt').send('What to test');
    })

var getNatDate = function (unixTmstmp) {
/*****  METHOD 1 ******
    var dt = new Date(unixTmstmp*1000);  // convert to JS timestamp
    var dtStr = dt.toDateString().substring(4);
    switch (dtStr.substring(0,3)) {
    case 'Jan': dtStr = 'January' + dtStr.substring(3); break;
    case 'Feb': dtStr = 'February' + dtStr.substring(3); break;
    case 'Mar': dtStr = 'March' + dtStr.substring(3); break;
    case 'Apr': dtStr = 'April' + dtStr.substring(3); break;
    case 'May': break;
    case 'Jun': dtStr = 'June' + dtStr.substring(3); break;
    case 'Jul': dtStr = 'July' + dtStr.substring(3); break;
    case 'Aug': dtStr = 'August' + dtStr.substring(3); break;
    case 'Sep': dtStr = 'September' + dtStr.substring(3); break;
    case 'Oct': dtStr = 'October' + dtStr.substring(3); break;
    case 'Nov': dtStr = 'November' + dtStr.substring(3); break;
    case 'Dec': dtStr = 'December' + dtStr.substring(3); break;
    default: dtStr = 'Unknown';
  }
  return dtStr; 
  METHOD 1 ENDS  *****************
  
  METHOD 2 using Moment.js STARTS */
  var day = moment.unix(unixTmstmp);
  // console.log('day =', day);
  return moment(day).format('LL');
}

// Re-direct the default route to our application logic
app.use(function(req, res, next){
  console.log('Input is:', req.path);
  var unixTmstmp = null;
  var natDate = null
  if (Number(req.path.substring(1))) {
     unixTmstmp = Number(req.path.substring(1));
     natDate = getNatDate(unixTmstmp);
  } else {
    var decodedStr = decodeURI(req.path.substring(1));
    var dt = new Date(decodedStr);
    // console.log(dt);
    if (dt.toString() !== 'Invalid Date') {
      unixTmstmp = dt.getTime()/1000;
      // natDate = decodedStr;
      natDate = moment(dt).format('LL')
    }
  }
  var obj = {"unix": unixTmstmp, "natural": natDate};
  res.send(obj);
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

